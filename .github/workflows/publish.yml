name: Publish

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
      upload_url: ${{ steps.set_output.outputs.upload_url }}
    env:
      VERSION: ""
      UPLOAD_URL: ""
    steps:
      - name: Get version and upload url from release
        if: github.event_name == 'release'
        run: |
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "UPLOAD_URL=${{ github.event.release.upload_url }}" >> $GITHUB_ENV

      - name: Get release from API
        if: github.event_name == 'workflow_dispatch'
        id: release_api
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Parse API response
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "VERSION=${{ fromJson(steps.release_api.outputs.data).tag_name }}" >> $GITHUB_ENV
          echo "UPLOAD_URL=${{ fromJson(steps.release_api.outputs.data).upload_url }}" >> $GITHUB_ENV

      - name: Log version and upload URL
        run: |
          echo "Version: $VERSION"
          echo "Upload URL: $UPLOAD_URL"

      - name: Fail if no version or no upload URL
        run: |
          if [[ -z "$VERSION" || -z "$UPLOAD_URL" ]]; then
            echo "Missing version or upload URL"
            exit 1
          fi

      - name: Set outputs
        id: set_output
        run: |
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

  package:
    needs: version
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.13"
          enable-cache: true
          cache-suffix: uv-${{ runner.os }}-3.13

      - name: Install dependecies
        run: uv sync

      - name: Set package version
        run: |
          uvx --from=toml-cli toml set --toml-path=pyproject.toml project.version ${{ needs.version.outputs.version }}

      - name: Build package
        run: |
          uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ needs.version.outputs.upload_url }}
          asset_path: ./dist/eq3btsmart-${{ needs.version.outputs.version }}.tar.gz
          asset_name: eq3btsmart-${{ needs.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ needs.version.outputs.upload_url }}
          asset_path: ./dist/eq3btsmart-${{ needs.version.outputs.version }}-py3-none-any.whl
          asset_name: eq3btsmart-${{ needs.version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip
